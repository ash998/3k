#class {bot} {open};

/* Disable items while botting */
mapoff
prompt >$nl$

/* Build Party Variable */
#send !pwho

/* Initialize Variables */
#var foundmob 0
#var foundplayer 0
#var goldfound 0
#var itemfound 0
#var bot 0
#var singlestep 0
#var stepping 0

#nop some guilds need to pause temporarily
#alias {.tmp_pause} {
        #var stepping 0;
        #var halt 1;     
}

#nop unpauses the temporary pause
#alias {.tmp_unpause} {
        #var halt 0;
	.bot;
}

#alias {.pause} {
	#class {xbot} {kill};
	#var stepping 0;
	#var halt 1
}

#alias {.stop} {
	#map get {roomvnum} {bots[vnum]};
	#path save forward bots[path];
	#path save position bots[position];
	#class {xbot} {kill};
	#alias {xx} {#nop};
	#alias {_check_mob} {#nop};
	#var stepping 0;
	#var halt 1
}

#alias {.resume} {
	#map run $bots[vnum];
	#path load $bots[path];
	#path goto $bots[position];
	#var halt 0;
	#delay {2} {.bot}
}

#alias {.single} {
	#var singlestep 1
}

#nop #alias {_check_mob} {#NOP}

#act {{^=S=}} {_room_short} {1};

#alias {_room_short} {
        #var stepping 1;
        #var foundplayer 0;
	#var goldfound 0;
	#var itemfound 0;
	#var foundmob 0;

        #if {!$halt && $bot && ("@guild_halt{}"=="\@guild_halt\{\}" || "@guild_halt{}"=="0")} {
                #act {^>$} {
	                #unact {^>$};
	                _eval_room;
                } {1}
	}
}

#alias {_eval_room} {
	#if {!$halt && $bot} {
	        #if {$itemfound && !$foundplayer && $vacuum} {
		        #send !get all
		};
		
		#if {$goldfound && !$foundplayer} {
		        #send !divvy gold
		};
		
		#if {!$foundmob || $foundplayer} {
		        #var stepping 1;
		        #path walk;
	                #path save position bots[position];
			#var multicycle[$world][$guild][type][@cycletype{}][savedbotstate][position] {$bots[position]};
	 		#map get {roomvnum} {multicycle[$world][$guild][type][@cycletype{}][savedbotstate][vnum]};
			#path save forward multicycle[$world][$guild][type][@cycletype{}][savedbotstate][path];
			#var multicycle[$world][$guild][type][@cycletype{}][savedbotstate][length] {$bots[length]};
			#var multicycle[$world][$guild][type][@cycletype{}][savedbotstate][stepper] {$bots[stepper]};
	                botdraw;
		} {
		        #var stepping 0;
		        #if {"$mobname" != ""} {
			        kill $mobname
			};
		};
	};
}

#alias {_check_mob} {
        #math foundmob {1+$foundmob};
}

#alias {..} {
        #act {{^=S=}} {_room_short} {1};
	#alias {_check_mob} {#math foundmob {1+$foundmob};};
	#var halt 0;
	#var bot 1;
	#var stepping 1;
	#send !glance;
}

#alias {..old} {
        #undelay gohome;
	#var bot 1;
	#var halt 0;
	#class {xbot} {open};
	#delay {4};
	#act {{^=S=}} {xx} {1};
	#alias {xx} {
		#var stepping 1;
		#var foundplayer 0;
		#var goldfound 0;
		#var itemfound 0;
		#act {^>$} {
			#if {$itemfound && !$foundplayer && $vacuum} {
				#send !get all
			};
			#if {$goldfound && !$foundplayer} {
				#send !divvy gold
			};
			#path walk;
			#unact {^>$}
		} {1}
	};
	#alias {_check_mob} {
		#var stepping 0;
		#act {^>$} {
			#unact {^>$};
			#if {$foundplayer} {
				#path walk
			} {
				.pause;
				#if {"$mobname" != ""} {
					kill $mobname
				};
				#var foundmob 1;
				#if {$itemfound && $vacuum} {
					get all
				};
				#if {$goldfound} {
					#send !get coins
				}
			}
		}
	};
	#send !glance;
	#class {xbot} {close};
}

#act { gold coins.$} {
	#var goldfound 1
}

#act {^=A= } {
	#var itemfound 1
}
#act {^=W= } {
	#var itemfound 1
}
#act {^=I= } {
	#var itemfound 1
}

#alias {killbot} {
	.stop;
	#class bot kill;
	#unalias {.bot};
	#var bot 0;
	#var mobname {};
}

#alias {.bot} {
	#nop If the function guild_cycletype or cycletype is undefined or they both return the same, then just run as normal;

	#nop Need to check for defined like this because the #if parser is acting weird;
	#if {"@guild_cycletype{}"=="\@guild_cycletype\{\}"} {#var guild_cycletype_is_defined 0} {#var guild_cycletype_is_defined 1};
	#if {"@cycletype{}"=="\@cycletype\{\}"} {#var cycletype_is_defined 0} {#var cycletype_is_defined 1};
	#if {"@guild_halt{}"=="\@guild_halt\{\}"} {#var guild_halt_is_defined 0} {#var guild_halt_is_defined 1};


	#if {!$guild_cycletype_is_defined || !$cycletype_is_defined || "@guild_cycletype{}"=="@cycletype{}" || !&{multicycle[$world][$guild][type][@guild_cycletype{}][botcycle][]}} {
		#if {!$halt && (!$guild_halt_is_defined || "@guild_halt{}"==="0")} {
			#delay {0} {..};
		}
	} {
		#nop If they differ, then load the cycletype that the guild calls for;
		.stop;
		cycleload @guild_cycletype{};
	};
}

#alias {dogtank} {#alias {kill} {#delay {2} {dog sicem %%0}}}
#alias {nodogtank} {#unalias {kill}};

#act {^=K=%1 dealt the killing blow to} {
        corpsetrig;
        #if {!$singlestep} {
		.bot
	}
} {1}

/* Detect Players */
#act {^=P= %*} {
	#var party_simple $party;
	#list party_simple simplify;
	#var party_found 0;
	#foreach {$party_simple} {party_member} {
		#REGEX {%0} {$party_member} {#var party_found 1}
	};
	#if {!${party_found}} {
		#var foundplayer 1
	}
} {6}

/* Skip room on Mob */
#NOP #act {Crikey} {#var foundplayer 1}

#alias {v %1} {#if {"%1" == "on"} {#var vacuum 1} {#var vacuum 0}}

#act {^#PATH WALK: #END OF PATH} {
	#if {$no_loop || !$foundmob} {
		killbot;
		#if {&{multicycle[$world][$guild][type][@cycletype{}][botcycle][]} > 1} {
			nextarea
		}; #else {
			#if {!$no_home} {go home}
		}
	} {
		#unact {^>$};
		#path load botpath;
                #path save length bots[length];
		#var foundmob 0;
		.bot
	}
}

/* Coffin Auto-Donate */
#var {coffinbot} {off}
#act {^The coffin is full!} {
	#if {"$coffinbot" == "on"} {
		.stop;
		#delay {coffin_donate} {
			go morgue;
			donate coffin
		} {1};
		#delay {coffin_return} {
			.resume
		} {2}
	}
}


#path load botpath;
#path save length bots[length];
#var halt 2;

#class {bot} {close}
