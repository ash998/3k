#class {botcycle_vars} {open};

#nop class <classname> read implicitely closes the class;
#class botcycle_vars read {.tt/3k/vars/botcycle.var};

#class {botcycle_vars} {open};

#if {!&multicycle} {
        #var multicycle {};
        #class botcycle_vars write {.tt/3k/vars/botcycle.var};
};

#if {!&multicycle} {
	#var multicycle {};
};

#alias {dscaler} {

  #var _dungeon {_noval};
  #var _scaler {_noval};
  #regex {%0} {{^(.+) (.+)$}}
  {
    #var _dungeon {&2};
    #var _scaler {&3};
                   
  };

  #if {"$_dungeon"=="_noval" || "$_scaler"=="_noval"} {
    #showme Usage: dscaler <dungeon> <scaler>;
    #showme Note that this setting is per char per guild.;
    #foreach {*dungeon[scaler][]} {item} {
      #if {$dungeon[scaler][$item][$world][$guild]} {
        #show For $world in the $guild guild $item is scaled to $dungeon[scaler][$item][$world][$guild];
      };
    };
  } {
    #var dungeon[scaler][$_dungeon][$world][$guild] {$_scaler};
    #showme The scaler for the $_dungeon dungeon, for $world as $guild, is now set to $_scaler.;
    #class botcycle_vars write {.tt/3k/vars/botcycle.var};
    #showme Scaler data saved to .tt/3k/vars/botcycle.var;
  };
};

#alias {_initialize_multicycle} {
        #if {"@guild_cycletype{}"!="\@guild_cycletype\{\}" && "@guild_cycletype{}"!=="$multicycle[$world][$guild][current]"} {
		#class {botcycle_vars} {open};
                #var multicycle[$world][$guild][current] {@guild_cycletype{}};
		#class botcycle_vars write {.tt/3k/vars/botcycle.var};
		#class {botcycle_vars} {close};
        };

	#if {$multicycle[$world][$guild][type]} {
		#var _savedbotstatedetected {0};
	        #foreach {*multicycle[$world][$guild][type][]} {cycletype} {
			#if {$multicycle[$world][$guild][type][$cycletype][savedbotstate][position]} {
				#var _savedbotstatedetected {1};
			};
		};
		#if {$_savedbotstatedetected} {
			#showme NOTE: saved bot states exist!;
			#showme To continue with the saved bot states use "gogo continue".;
			#showme To start the cycle from scratch (starting with the @cycletype{} cycle) use "gogo clean".;
			#showme To start over, use "botclear" and make your setup from scratch, then start it with "gogo clean".;
		};
	};
	botdraw;
};

#event {VARIABLE UPDATE multicycle} {
#nop	#delay 0 botdraw;
#nop	#class botcycle_vars write {.tt/3k/vars/botcycle.var};
#nop	#showme Data saved to .tt/3k/vars/botcycle.var;
};


#class {botcycle_vars} {close};


#nop This file loads before $guild is set, so wait a second before setting up.
#delay {1} {_initialize_multicycle};

#class {botcycle} {open};
#NOP REQUIRED:  draw.tin  //canvas dimensions;
#nop		bot_main.tin;
#nop		The $world and $guild vars must be set;

#alias {gogo} {
        #if {"@guild_cycletype{}"!="\@guild_cycletype\{\}" && "@guild_cycletype{}"!="$multicycle[$world][$guild][current]"} {
                #var multicycle[$world][$guild][current] {@guild_cycletype{}};
        };

	#if {"%1"!="clean" && "%1"!="continue"} {
		#show Use gogo clean to clear saved states and start from scratch.;
		#show Use gogo continue to continue running from previously saved state.;
	} {
		#if {"%1"=="clean"} {
		        #foreach {*multicycle[$world][$guild][type][]} {cycletype} {
		                #unvar multicycle[$world][$guild][type][$cycletype][savedbotstate];
				#var multicycle[$world][$guild][type][$cycletype][cycle] 1;
			};
			cycle 1;
			thisarea;
		};
		#if {"%1"=="continue"} {
			_cycleload @cycletype{};
		};
        };
	botdraw;
	save_botcycle;
};


#alias {save_botcycle} {
	#class botcycle_vars write {.tt/3k/vars/botcycle.var};
};

#function {cycletype} {
	#return $multicycle[$world][$guild][current];
};


#alias {ba} {
	#if {"%2"==""}	{#var cycletype {default}}
			{#var cycletype {%2}};

	#var botpath {%1};

        #if {!$multicycle[$world][$guild][type][$cycletype][cycle]} {#var multicycle[$world][$guild][type][$cycletype][cycle] 1};
        #list {multicycle[$world][$guild][type][$cycletype][botcycle]} {add} {%1};
	save_botcycle;
        botdraw;
};

#alias {br} {
        #if {"%2"==""}	{#var cycletype {default}}
			{#var cycletype {%2}};

	#var cyclenum {%1};

	#list {multicycle[$world][$guild][type][$cycletype][botcycle]} {del} {$cyclenum};

	#if {$cyclenum == $multicycle[$world][$guild][type][$cycletype][cycle]} {
		#nop If we're deleting the saved cycle, zero out the saved cycle;
		#unvar multicycle[$world][$guild][type][$cycletype][savedbotstate];
	};

	#if {$cyclenum < $multicycle[$world][$guild][type][$cycletype][cycle]} {
		#math {multicycle[$world][$guild][type][$cycletype][cycle]} {$multicycle[$world][$guild][type][$cycletype][cycle] - 1};
	};
	save_botcycle;
	botdraw;
};

#alias {botclear} {
	#foreach {*multicycle[$world][$guild][type][]} {cycletype} {
		#var multicycle[$world][$guild][type][$cycletype][cycle] {0};
		#var multicycle[$world][$guild][type][$cycletype][botcycle] {};
		#unvar multicycle[$world][$guild][type][$cycletype][savedbotstate];
	};
	save_botcycle;
	botdraw;
};

#alias {thisarea} {
        #list {multicycle[$world][$guild][type][@cycletype{}][botcycle]} {get} {$multicycle[$world][$guild][type][@cycletype{}][cycle]} {multicycle[$world][$guild][type][@cycletype{}][currentarea]};

        #if {$dungeon[scaler][$multicycle[$world][$guild][type][@cycletype{}][currentarea]][$world][$guild]} {scaler $dungeon[scaler][$multicycle[$world][$guild][type][@cycletype{}][currentarea]][$world][$guild]};

        #var roomnote {};
        #read .tt/3k/bots/$multicycle[$world][$guild][type][@cycletype{}][currentarea].tin;
        #if {"$roomnote"!=""} {go $roomnote} {go $multicycle[$world][$guild][type][@cycletype{}][currentarea]};

        #delay {1} {- $multicycle[$world][$guild][type][@cycletype{}][currentarea]};
        #delay {4} {..}
};

#alias {nextarea} {
        #if {$multicycle[$world][$guild][type][@cycletype{}][cycle] < &{multicycle[$world][$guild][type][@cycletype{}][botcycle][]}} {
                #math multicycle[$world][$guild][type][@cycletype{}][cycle] {$multicycle[$world][$guild][type][@cycletype{}][cycle]+1}
        } {
                #var multicycle[$world][$guild][type][@cycletype{}][cycle] 1
        };

        #list {multicycle[$world][$guild][type][@cycletype{}][botcycle]} {get} {$multicycle[$world][$guild][type][@cycletype{}][cycle]} {multicycle[$world][$guild][type][@cycletype{}][currentarea]};

        #if {$dungeon[scaler][$multicycle[$world][$guild][type][@cycletype{}][currentarea]][$world][$guild]} {scaler $dungeon[scaler][$multicycle[$world][$guild][type][@cycletype{}][currentarea]][$world][$guild]};

        #var roomnote {};
        #read .tt/3k/bots/$multicycle[$world][$guild][type][@cycletype{}][currentarea].tin;
        #if {"$roomnote"!=""} {go $roomnote} {go $multicycle[$world][$guild][type][@cycletype{}][currentarea]};

        #delay {1} {- $multicycle[$world][$guild][$multicycle[type][@cycletype{}][currentarea]};
        #delay {4} {..}
	botdraw;
	save_botcycle;
};

#nop Save the state of the current bot, so we can get back to it easily;
#alias {cyclesave} {
        #map get {roomvnum} {bots[vnum]};
        #path save forward bots[path];
        #path save position bots[position];


	#var multicycle[$world][$guild][type][$multicycle[$world][$guild][current]][savedbotstate][length] $bots[length];
        #var multicycle[$world][$guild][type][$multicycle[$world][$guild][current]][savedbotstate][path] $bots[path];
        #var multicycle[$world][$guild][type][$multicycle[$world][$guild][current]][savedbotstate][position] $bots[position];
        #var multicycle[$world][$guild][type][$multicycle[$world][$guild][current]][savedbotstate][stepper] $bots[stepper];
        #var multicycle[$world][$guild][type][$multicycle[$world][$guild][current]][savedbotstate][vnum] $bots[vnum];
        #class botcycle_vars write {.tt/3k/vars/botcycle.var};
};

#alias {_cycleload} {
	#if {""!=="$multicycle[$world][$guild][type][%1][savedbotstate][position]"} {
                - $multicycle[$world][$guild][type][%1][savedbotstate][stepper];
                #var bots[length] $multicycle[$world][$guild][type][%1][savedbotstate][length];
                #var bots[path] $multicycle[$world][$guild][type][%1][savedbotstate][path];
                #var bots[position] $multicycle[$world][$guild][type][%1][savedbotstate][position];
                #var bots[stepper] $multicycle[$world][$guild][type][%1][savedbotstate][stepper];
                #var bots[vnum] $multicycle[$world][$guild][type][%1][savedbotstate][vnum];
                .resume;
        } {
                cycle 1;
                thisarea;
        };
	botdraw;
};

#nop Save the state of the current bot and load the state of the specified bot;
#alias {cycleload} {
	#if {@numbotareas{%1}} {
		cyclesave;
		#var multicycle[$world][$guild][current] {%1};

		_cycleload %1;
	} {
		#showme Attempted to load empty or nonexisting cycle type "%1", load aborted.;
	};
        #class botcycle_vars write {.tt/3k/vars/botcycle.var};
};

#alias {bc} {
	#if {"%1"==""} {
		#var cty {@cycletype{}};
	} {
		#var cty {%1};
	};

        #echo {<228>+-------------------+}<088>;

	#if {"$cty"!=""} {#format {header_display} {%-17s} {$cty}} {#format {header_display} {%-17s} {Area Cycler}};
        #echo {<228>|<138> $header_display <228>|<088>};
        #echo {<228>+-------------------+}<088>;
        #if {&{multicycle[$world][$guild][type][$cty][botcycle][]} == 0} {
                #echo {<228> |<178>  No areas loaded  <228>|<088>};
                #echo {<228> +-------------------+}<088>
        } {
                #var cnt 0;
                #while {$cnt < &{multicycle[$world][$guild][type][$cty][botcycle][]}} {
                        #math {cnt} {$cnt + 1};
                        #if {$cnt == $multicycle[$world][$guild][type][$cty][cycle]} {
                                #format {cntnum} {%+4s} {<128>$cnt\.<088>};
                                #format {area_display} {%-13s} {<128>$multicycle[$world][$guild][type][$cty][botcycle][$cnt]<088>}
                        } {
                                #format {cntnum} {%+4s} {<178>$cnt\.<088>};
                                #format {area_display} {%-13s} {<148>$multicycle[$world][$guild][type][$cty][botcycle][$cnt]<088>}
                        };
                        #echo { <228>| $cntnum $area_display <228>|<088>};
                };
                #echo { <228>+-------------------+}<088>
        }
};

#function {numbotareas} {
	#if {"%1"!=""} {
		#return {&{multicycle[$world][$guild][type][%1][botcycle][]}};
	} {
		#return {&{multicycle[$world][$guild][type][@cycletype{}][botcycle][]}};
	};
};

#function {_botdraw} {

	#regex {%0} {{^(.+) (.+)$}}
	{
		#var cty {&2};
		#var drawoffset {&3};
	};

        #if {"$cty"==""} {
                #var cty {@cycletype{}};
        };

	#if {"$drawoffset"==""} {
		#var drawoffset {0};
	};

	#if {"$multicycle[$world][$guild][type][$cty][savedbotstate][position]"!=""} {
		#var progress { ($multicycle[$world][$guild][type][$cty][savedbotstate][position]/$multicycle[$world][$guild][type][$cty][savedbotstate][length])};
	} {
		#var progress {};
	};


	#var botheight {0};
	#var _numbotareas {&{multicycle[$world][$guild][type][$cty][botcycle][]}};

        #if {"$draw[canvas]" == "on"} {
	        #NOP Clear previous drawing;
		#if {!$drawoffset} {
		        #screen clear square $chat[height]+$caption[height]+1 -$canvas[width]+1 -$status[height]-2 -1;
		};

	        #if {!$_numbotareas} {
			#format {area_display} {%-17s} {No areas in: $cty};
                	#var botareas {
	                        <178>$area_display<088>
		        };
	                #var botheight 1;
	        } {
	                #var botheight {$_numbotareas};
	                #var botareas {};
	                #var cnt 0;
	                #while {$cnt < $_numbotareas} {
	                        #math {cnt} {$cnt + 1};
	                        #if {$cnt == $multicycle[$world][$guild][type][$cty][cycle]} {
	                                #format {cntnum} {%+4s} {<128>$cnt.<088>};
					#format {area_display} {%-12s} {<128>$multicycle[$world][$guild][type][$cty][botcycle][$cnt]$progress<088>};
	                        } {
	                                #format {cntnum} {%+4s} {<178>$cnt.<088>};
	                                #format {area_display} {%-12s} {<148>$multicycle[$world][$guild][type][$cty][botcycle][$cnt]<088>};
		                };
	                        #if {$cnt == 1} {
	                                #var botareas {$cntnum $area_display};
	                        } {
	                                #var botareas {$botareas\n$cntnum $area_display};
	                        };
	                };
	        };
		#format {area_display} {%-17s} {Areas in: $cty};
	        #draw green rounded box $chat[height]+$caption[height]+2+$drawoffset -$canvas[width]+2 $chat[height]+$caption[height]+4+$drawoffset -3 {
	                <138>$area_display<088>
	        };
	        #draw green rounded box $chat[height]+$caption[height]+4+$drawoffset -$canvas[width]+2 $chat[height]+$caption[height]+5+$botheight+$drawoffset -3 {
	                $botareas
	        };
	        #showme {<228>\u251C} $chat[height]+$caption[height]+4+$drawoffset -$canvas[width]+2;
	        #showme {<228>\u2524} $chat[height]+$caption[height]+4+$drawoffset -3;
        };
	#return @math{$drawoffset+$botheight+4};
};

#alias {botdraw} {
	#var _drawoffset {@_botdraw{@cycletype{} 0}};

        #foreach {*multicycle[$world][$guild][type][]} {cycletype} {
		#if {"@cycletype{}"!="$cycletype"} {
			#var _drawoffset @_botdraw{$cycletype $_drawoffset};
		}
        };

};

#alias {cycle} {
        #if {"%2"===""}  {#var cycletype {@cycletype{}}}
                         {#var cycletype {%2}};


        #var multicycle[$world][$guild][type][$cycletype][cycle] {%1};
	botdraw;
	save_botcycle;
};

#alias {setcycletype} {
        #var multicycle[$world][$guild][current] {%1};
	botdraw;
	save_botcycle;
};


#alias {bas}		{ba {rim2;android;dundee8;dundee7;dundee6;dundee5}};
#NOP #alias {bas2}	{ba {whorehouse;puppy;mahjongg;rim2;whorehouse;puppy;mahjongg;android;whorehouse;puppy;mahjongg;rim2;whorehouse;puppy;mahjongg;dundee8;whorehouse;puppy;mahjongg;rim2;whorehouse;puppy;mahjongg;dundee7;whorehouse;puppy;mahjongg;rim2;whorehouse;puppy;mahjongg;dundee6}};
#alias {bas2}		{ba {whorehouse;mahjongg;rim2;whorehouse;mahjongg;dundee8;whorehouse;mahjongg;dundee7;whorehouse;mahjongg;dundee6}};
#alias {bas3}		{ba {whorehouse;rim2;whorehouse;dundee8;whorehouse;dundee7;whorehouse;dundee6}};
#alias {basa}		{ba {aegis1;aegis2;aegis3;aegis4;aegis5}};
#alias {badundee}	{ba {dundee1;dundee2;dundee3;dundee4;dundee5;dundee6;dundee7;dundee8}};
#alias {bao}            {ba {chess;zelligars;chess;mahjongg;chess;mahjongg}};

#class {botcycle} {close}
