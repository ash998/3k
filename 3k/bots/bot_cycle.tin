#class {botcycle_vars} {open};

#var dungeon[scaler][zelligars][orthas][mage] {150};
#var dungeon[scaler][chess][orthas][mage] {150};
#var dungeon[scaler][mahjongg][orthas][mage] {99};

#class botcycle_vars read {.tt/3k/vars/botcycle.var};

#alias {dscaler} {

  #var _dungeon {_noval};
  #var _scaler {_noval};
  #regex {%0} {{^(.+) (.+)$}}
  {
    #var _dungeon {&2};
    #var _scaler {&3};
                   
  };

  #if {"$_dungeon"=="_noval" || "$_scaler"=="_noval"} {
    #showme Usage: dscaler <dungeon> <scaler>;
    #showme Note that this setting is per char per guild.;
    #foreach {*dungeon[scaler][]} {item} {
      #if {$dungeon[scaler][$item][$world][$guild]} {
        #show For $world in the $guild guild $item is scaled to $dungeon[scaler][$item][$world][$guild];
      };
    };
  } {
    #var dungeon[scaler][$_dungeon][$world][$guild] {$_scaler};
    #showme The scaler for the $_dungeon dungeon, for $world as $guild, is now set to $_scaler.;
    #class botcycle_vars write {.tt/3k/vars/botcycle.var};
    #showme Scaler data saved to .tt/3k/vars/botcycle.var;
  };
};

#class {botcycle_vars} {close};

#class {botcycle} {open};
#NOP REQUIRED:  draw.tin  //canvas dimensions;

#var cycle 0;

#var multicycle[type][default][cycle] {$cycle};
#var multicycle[current] {default};

#function {cycletype} {
	#return $multicycle[current];
};


#alias {ba} {
	#if {"%2"==""}	{#var cycletype {default}}
			{#var cycletype {%2}};

	#var botpath {%1};

        #if {!$multicycle[type][$cycletype][cycle]} {#var multicycle[type][$cycletype][cycle] 1};
        #list {multicycle[type][$cycletype][botcycle]} {add} {%1};
        botdraw;
};

#alias {br} {
        #if {"%2"==""}	{#var cycletype {default}}
			{#var cycletype {%2}};

	#var cyclenum {%1};

	#list {multicycle[type][$cycletype][botcycle]} {del} {$cyclenum};

	#if {$cyclenum == $multicycle[type][$cycletype][cycle]} {
		#nop If we're deleting the saved cycle, zero out the saved cycle;
		#unvar multicycle[type][@cycletype{}][savedbotstate];
	};

	#if {$cyclenum < $multicycle[type][$cycletype][cycle]} {
		#math {multicycle[type][$cycletype][cycle]} {$multicycle[type][$cycletype][cycle] - 1};
	};
	botdraw;
};

#alias {botclear} {
	#foreach {*multicycle[type][]} {cycletype} {
		#var multicycle[type][$cycletype][cycle] {0};
		#var multicycle[type][$cycletype][botcycle] {};
		#unvar multicycle[type][$cycletype][savedbotstate];
	};
};

#alias {thisarea} {
        #list {multicycle[type][@cycletype{}][botcycle]} {get} {$multicycle[type][@cycletype{}][cycle]} {multicycle[type][@cycletype{}][currentarea]};

        #if {$dungeon[scaler][$multicycle[type][@cycletype{}][currentarea]][$world][$guild]} {scaler $dungeon[scaler][$multicycle[type][@cycletype{}][currentarea]][$world][$guild]};

        #var roomnote {};
        #read .tt/3k/bots/$multicycle[type][@cycletype{}][currentarea].tin;
        #if {"$roomnote"!=""} {go $roomnote} {go $multicycle[type][@cycletype{}][currentarea]};

        #delay {1} {- $multicycle[type][@cycletype{}][currentarea]};
        #delay {4} {..}
};

#alias {nextarea} {
        #if {$multicycle[type][@cycletype{}][cycle] < &{multicycle[type][@cycletype{}][botcycle][]}} {
                #math multicycle[type][@cycletype{}][cycle] {$multicycle[type][@cycletype{}][cycle]+1}
        } {
                #var multicycle[type][@cycletype{}][cycle] 1
        };
        #list {botcycle} {get} {$multicycle[type][@cycletype{}][cycle]} {multicycle[type][@cycletype{}][currentarea]};

        #if {$dungeon[scaler][$multicycle[type][@cycletype{}][currentarea]][$world][$guild]} {scaler $dungeon[scaler][$multicycle[type][@cycletype{}][currentarea]][$world][$guild]};

        #var roomnote {};
        #read .tt/3k/bots/$multicycle[type][@cycletype{}][currentarea].tin;
        #if {"$roomnote"!=""} {go $roomnote} {go $multicycle[type][@cycletype{}][currentarea]};

        #delay {1} {- $multicycle[$multicycle[type][@cycletype{}][currentarea]};
        #delay {4} {..}
};

#nop Save the state of the current bot, so we can get back to it easily;
#alias {cyclesave} {
	.stop;
	#var multicycle[type][@cycletype{}][savedbotstate][length] {$bots[length]};
        #var multicycle[type][@cycletype{}][savedbotstate][path] {$bots[path]};
        #var multicycle[type][@cycletype{}][savedbotstate][position] {$bots[position]};
        #var multicycle[type][@cycletype{}][savedbotstate][stepper] {$bots[stepper]};
        #var multicycle[type][@cycletype{}][savedbotstate][vnum] {$bots[vnum]};
};

#nop Save the state of the current bot and load the state of the specified bot;
#alias {cycleload} {
	cyclesave;
	#var cycletype {%1};
	#var multicycle[current] {$cycletype};

	#if {$multicycle[type][@cycletype{}][savedbotstate][position]} {
	        #var bots[type][length] {$multicycle[type][@cycletype{}][savedbotstate][length]};
	        #var bots[type][path] {$multicycle[type][@cycletype{}][savedbotstate][path]};
	        #var bots[type][position] {$multicycle[type][@cycletype{}][savedbotstate][position]};
	        #var bots[type][stepper] {$multicycle[type][@cycletype{}][savedbotstate][stepper]};
		#var bots[type][vnum] {$multicycle[type][@cycletype{}][savedbotstate][vnum]};
		.resume;
	} {
		cycle 1;
		thisarea;
	};
};

#alias {bc} {
	#if {"%1"==""} {
		#var cty {@cycletype{}};
	} {
		#var cty {%1};
	};

        #echo {<228>+-------------------+}<088>;

	#if {"$cty"!=""} {#format {header_display} {%-17s} {$cty}} {#format {header_display} {%-17s} {Area Cycler}};
        #echo {<228>|<138> $header_display <228>|<088>};
        #echo {<228>+-------------------+}<088>;
        #if {&{multicycle[type][$cty][botcycle][]} == 0} {
                #echo {<228> |<178>  No areas loaded  <228>|<088>};
                #echo {<228> +-------------------+}<088>
        } {
                #var cnt 0;
                #while {$cnt < &{multicycle[type][$cty][botcycle][]}} {
                        #math {cnt} {$cnt + 1};
                        #if {$cnt == $multicycle[type][$cty][cycle]} {
                                #format {cntnum} {%+4s} {<128>$cnt\.<088>};
                                #format {area_display} {%-13s} {<128>$multicycle[type][$cty][botcycle][$cnt]<088>}
                        } {
                                #format {cntnum} {%+4s} {<178>$cnt\.<088>};
                                #format {area_display} {%-13s} {<148>$multicycle[type][$cty][botcycle][$cnt]<088>}
                        };
                        #echo { <228>| $cntnum $area_display <228>|<088>};
                };
                #echo { <228>+-------------------+}<088>
        }
};

#alias {botdraw} {
        #if {"%1"==""} {
                #var cty {@cycletype{}};
        } {
                #var cty {%1};
        };

	#var _numbotareas {&{multicycle[type][$cty][botcycle][]}};

        #if {"$draw[canvas]" == "on"} {
        #NOP Clear previous drawing;
        #screen clear square $chat[height]+$caption[height]+1 -$canvas[width]+1 -$status[height]-2 -1;

        #if {!$_numbotareas} {
		#format {area_display} {%-17s} {No areas in: $cty};
                #var botareas {
                        <178>$area_display<088>
                };
                #var botheight 1;
        } {
                        #var botheight {$_numbotareas};
                        #var botareas {};
                        #var cnt 0;
                        #while {$cnt < $_numbotareas} {
                                #math {cnt} {$cnt + 1};
                                #if {$cnt == $multicycle[type][$cty][cycle]} {
                                        #format {cntnum} {%+4s} {<128>$cnt.<088>};
                                        #format {area_display} {%-12s} {<128>$multicycle[type][$cty][botcycle][$cnt] ($bots[position]/$bots[length])<088>};
                                } {
                                        #format {cntnum} {%+4s} {<178>$cnt.<088>};
                                        #format {area_display} {%-12s} {<148>$multicycle[type][$cty][botcycle][$cnt]<088>};
                                };
                                #if {$cnt == 1} {
                                        #var botareas {$cntnum $area_display};
                                } {
                                        #var botareas {$botareas\n$cntnum $area_display};
                                };
                        }
                };
		#format {area_display} {%-17s} {Areas in: $cty};
                #draw green rounded box $chat[height]+$caption[height]+2 -$canvas[width]+2 $chat[height]+$caption[height]+4 -3 {
                        <138>$area_display<088>
                };
                #draw green rounded box $chat[height]+$caption[height]+4 -$canvas[width]+2 $chat[height]+$caption[height]+5+$botheight -3 {
                        $botareas
                };
                #showme {<228>\u251C} $chat[height]+$caption[height]+4 -$canvas[width]+2;
                #showme {<228>\u2524} $chat[height]+$caption[height]+4 -3
        }
};



#alias {cycle} {
        #var multicycle[type][@cycletype{}][cycle] {%1};
};

#alias {setcycletype} {
        #var multicycle[current] {%1};
};

#alias {ba_old} {
        #if {!$cycle} {#var cycle 1};
	#list {botcycle} {add} {%1};
	botdraw
};

#alias {br_old} {
	#list {botcycle} {del} {%1};
	#if {%1 < $cycle} {
		#math {cycle} {$cycle - 1}
	};
	botdraw
};

#alias {thisarea_old} {
	#list {botcycle} {get} {$cycle} {currentarea};
       
        #if {$dungeon[scaler][$currentarea][$world][$guild]} {scaler $dungeon[scaler][$currentarea][$world][$guild]};

        #var roomnote {};
        #read .tt/3k/bots/$currentarea.tin;
	#if {"$roomnote"!=""} {go $roomnote} {go $currentarea};

	#delay {1} {- $currentarea};
	#delay {4} {..}
};

#alias {nextarea_old} {
	#if {$cycle < &{botcycle[]}} {
		#math cycle {$cycle+1}
	} {
		#var cycle 1
	};
	#list {botcycle} {get} {$cycle} {currentarea};
	
	#if {$dungeon[scaler][$currentarea][$world][$guild]} {scaler $dungeon[scaler][$currentarea][$world][$guild]};

        #var roomnote {};
        #read .tt/3k/bots/$currentarea.tin;
        #if {"$roomnote"!=""} {go $roomnote} {go $currentarea};

	#delay {1} {- $currentarea};
	#delay {4} {..}
};

#alias {botclear_old} {
	#var botcycle {};
	#var cycle 0
};

#alias {bc_old} {
	#echo {<228>+-------------------+}<088>;
	#echo {<228>|<138>    Area Cycler    <228>|<088>};
	#echo {<228>+-------------------+}<088>;
	#if {&{botcycle[]} == 0} {
		#echo {<228> |<178>  No areas loaded  <228>|<088>};
		#echo {<228> +-------------------+}<088>
	} {
		#var cnt 0;
		#while {$cnt < &{botcycle[]}} {
			#math {cnt} {$cnt + 1};
			#if {$cnt == $cycle} {
				#format {cntnum} {%+4s} {<128>$cnt\.<088>};
				#format {area_display} {%-12s} {<128>$botcycle[$cnt]<088>}
			} {
				#format {cntnum} {%+4s} {<178>$cnt\.<088>};
				#format {area_display} {%-12s} {<148>$botcycle[$cnt]<088>}
			};
			#echo { <228>| $cntnum $area_display <228>|<088>};
		};
		#echo { <228>+-------------------+}<088>
	}
};

#alias {botdraw_old} {
	#if {"$draw[canvas]" == "on"} {
	#NOP Clear previous drawing;
	#screen clear square $chat[height]+$caption[height]+1 -$canvas[width]+1 -$status[height]-2 -1;

	#if {&{botcycle[]} == 0} {
		#var botareas {
			<178>            No areas loaded<088>
		};
		#var botheight 1;
	} {
			#var botheight &{botcycle[]};
			#var botareas {};
			#var cnt 0;
			#while {$cnt < &{botcycle[]}} {
				#math {cnt} {$cnt + 1};
				#if {$cnt == $cycle} {
					#format {cntnum} {%+4s} {<128>$cnt.<088>};
					#format {area_display} {%-12s} {<128>$botcycle[$cnt] ($bots[position]/$bots[length])<088>}
				} {
					#format {cntnum} {%+4s} {<178>$cnt.<088>};
					#format {area_display} {%-12s} {<148>$botcycle[$cnt]<088>}
				};
				#if {$cnt == 1} {
					#var botareas {$cntnum $area_display}
				} {
					#var botareas {$botareas\n$cntnum $area_display}
				}
			}
		};
		#draw green rounded box $chat[height]+$caption[height]+2 -$canvas[width]+2 $chat[height]+$caption[height]+4 -3 {
			<138>              Area Cycler    <088>
		};
		#draw green rounded box $chat[height]+$caption[height]+4 -$canvas[width]+2 $chat[height]+$caption[height]+5+$botheight -3 {
			$botareas
		};
		#showme {<228>\u251C} $chat[height]+$caption[height]+4 -$canvas[width]+2;
		#showme {<228>\u2524} $chat[height]+$caption[height]+4 -3
	}
};

#alias {cycle_old} {
	#var cycle %1
};

#event {VARIABLE UPDATE multicycle} {
	#delay 0 botdraw;
};

#event {VARIABLE UPDATE cycle} {
	#delay 0 botdraw;
};


#event {VARIABLE UPDATE botcycle} {
	#delay 0 botdraw;
};

#alias {bas}		{ba {rim2;android;dundee8;dundee7;dundee6;dundee5}};
#NOP #alias {bas2}	{ba {whorehouse;puppy;mahjongg;rim2;whorehouse;puppy;mahjongg;android;whorehouse;puppy;mahjongg;rim2;whorehouse;puppy;mahjongg;dundee8;whorehouse;puppy;mahjongg;rim2;whorehouse;puppy;mahjongg;dundee7;whorehouse;puppy;mahjongg;rim2;whorehouse;puppy;mahjongg;dundee6}};
#alias {bas2}		{ba {whorehouse;mahjongg;rim2;whorehouse;mahjongg;dundee8;whorehouse;mahjongg;dundee7;whorehouse;mahjongg;dundee6}};
#alias {bas3}		{ba {whorehouse;rim2;whorehouse;dundee8;whorehouse;dundee7;whorehouse;dundee6}};
#alias {basa}		{ba {aegis1;aegis2;aegis3;aegis4;aegis5}};
#alias {badundee}	{ba {dundee1;dundee2;dundee3;dundee4;dundee5;dundee6;dundee7;dundee8}};
#alias {bao}            {ba {chess;zelligars;chess;mahjongg;chess;mahjongg}};

#class {botcycle} {close}
