#if {!@file_exists{.tt/3k/vars/jugger.var}}
{
        #class {jugger_vars} {open};

        #var juggerv[cycle][type] {default};


#nop When down to this many corpses, switch to gather cycle type;
        #var juggerv[cycle][min_corpses] {5};

#nop When up to this many corpses, switch to spend cycle type, set to 0 to use coffin max;
        #var juggerv[cycle][max_corpses] {0};

        #class jugger_vars write {.tt/3k/vars/jugger.var};
        #class {jugger_vars} {close};

}
{
  #class jugger_vars read {.tt/3k/vars/jugger.var};
};


#class {juggernaut} {open}

#var guild juggernaut
#var clan 0
#var jugger[current_cycletype] {$juggerv[cycle][type]};

#function {guild_halt} {
#nop No guild pauses implemented;
        #return  0;
};

#function {guild_cycletype} {
        #return $jugger[current_cycletype];
};

#alias {gcycleset} {
        #if {"%1"!="default" && "%1"!="gather" && "%1"!="spend"} {
                #showme Usage: bcycleset [default|gather|spend];
                #showme        If using "default", it will stay in default untill you set it to something else.;
                #showme        If using "gather" or "spend", it will toggle between the two based on the values;
                #showme        in juggerv[cycle][min_corpses] and juggerv[cycle][max_corpses].;
                #showme        Your current cycle is: @guild_cycletype{};
        } {
                #var jugger[current_cycletype] {%1};
                #var juggerv[cycle][type] {%1};
                save_guild_vars;
        }
};

#alias {gcyclecheck} {
        #nop If we're in default, stay in default. Only swap between gather and spend.;
        #if {"$jugger[current_cycletype]"!="default"} {

                #if {"$jugger[current_cycletype]"=="gather"} {
                        #if {!$juggerv[cycle][max_corpses]} {#var _max_corpses {$jugger[coffin][max]}} {#var _max_corpses {$juggerv[cycle][max_corpses]}};
                        #if {$corpses[coffin] >= $_max_corpses} {
                                #var jugger[current_cycletype] {spend};
                                update_chat <138>Auto switching to spend cycle.<099>;
                        };
                } {
                        #if {$corpses[coffin] < $juggerv[cycle][min_corpses]} {
                                #var jugger[current_cycletype] {gather};
                                update_chat <138>Auto switching to gather cycle.<099>;
                        };
                };
        };
};

#alias {save_guild_vars} {#class jugger_vars write {.tt/3k/vars/jugger.var}};



#NOP Jugger HP Bar Configuration;
#nop Hp\:\[(\d+)/(\d+)\]\[(\d+)\] Sp\:\[(\d+)/(\d+)\] S\:\[(\d+)\%\]\[(\d+)\%\] H\:\[(\d+)\%\] Co\:\[(\d+)/(\d+)\] E\:(?:(\d+)\%)?;
#nop ^C\:\[(\d+)/(\d+)\] M\:\[(\d+)/(\d+)\] R\:\[(\d+)\%\] Gxp:\[(\d+)\.(\d+)\%\]$;
#nop hp set Hp:[$HP$][$HITS$] Sp:[$SP$] S:[$STIM$%][$TSTIM$%] H:[$HEAT$%] Co:[$CORP$/$MCORP$] E:$STATUS$$N$C:[$CP$/$MCP$] M:[$NUKES$/$MNUKES$] R:[$RESET$%] Gxp:[$GXP$%];

#act {{^Hp\:\[(\d+)/(\d+)\]\[(\d+)\] Sp\:\[(\d+)/(\d+)\] S\:\[(\d+)\%\]\[(\d+)\%\] H\:\[(\d+)\%\] Co\:\[(\d+)/(\d+)\] E\:(?:(\d+)\%)?}} {
	#var {my[hp][current]}		{%2};
	#var {my[hp][max]}		{%3};
	#var {jugger[hits]}		{%4};
	#var {my[sp][current]}		{%5};
	#var {my[sp][max]}		{%6};
	#var {my[gp1][current]}		{%7};
	#var {jugger[truck_stim]}	{%8};
	#var {my[gp2][current]}		{%9};
	#var {corpses[coffin]}		{%10};
	#var {jugger[coffin_max]}	{%11};
	#var {jugger[ehealth]}		{%13};

#nop	#if {$my[gp1][current] < 60} {stimheal};
#nop	#if {$my[gp1][current] < 50} {stimheal};
#nop	#if {$my[gp1][current] < 40} {stimheal};
#nop	#if {$my[gp1][current] < 30} {stimheal};
	#if {$my[gp1][current] < 20} {stimheal};
	#if {$my[gp1][current] < 25} {#bell};

	#if {1==2 && $my[gp1][current] < 95 && $my[sp][current] > 50} {
		#if {$my[gp2][current] > 70} {#send !dissipate};
		#send !transpose max;
	};

#nop #showme HP-bar test: HP $my[hp][current] Enemy: $jugger[ehealth];
};


#act {{^C\:\[(\d+)/(\d+)\] M\:\[(\d+)/(\d+)\] R\:\[(\d+)\%\] Gxp:\[(\d+)\.(\d+)\%\]$}} {
	#var {jugger[nukes]}		{%2};
	#var {jugger[nukes_max]}	{%3};
	#var {jugger[clan]}		{%4};
	#var {jugger[clan_max]}		{%5};
	#var {jugger[reset]}		{%6};
	#var {jugger[gxp]}		{%7};

	#if {$jugger[reset] >= 95} {
		#if {$jugger[clan] > 0} {
			#send !frenzy;
		}; #elseif {$nukes > 0 && $mip[round] > 0 && "$mobname" != ""} {
			#send !fire $nukes $mobname;
		}; #elseif {$nukes > 0 && $mip[round] > 0 && "$mobname" == ""} {
			#send !fire $nukes $enemy[lc];
		};
	};

#nop	#if {$shp > 0 && $shp < 9} {dismiss};
#nop	#if {"$saf" == "No"} {support assault fire};
	update_status;
	gcyclecheck;
#nop #showme HP-bar2 test: Nukes: $jugger[nukes] Gxp: $jugger[gxp]
};

#alias {update_status} {
	#if {"$cooler" == "on" || $corpses[cooler] > 0} {
		#format {sb1_cooler} {%+2s} {$corpses[cooler]};
		#var {sb1_cooler} { CL:<130>$sb1_cooler<088>}
	} {
		#var {sb1_cooler} {}
	};
	#if {"$freezer" == "on" || $corpses[freezer] > 0} {
		#format {sb2_freezer} {%+2s} {$corpses[freezer]};
		#var {sb2_freezer} { FZ:<130>$sb2_freezer<088>}
	} {
		#var {sb2_freezer} {}
	};
	#var {my[hp][graph]}	{@graph{$my[hp][current];$my[hp][max]}};
	#var {my[sp][graph]}	{@graph{$my[sp][current];$my[sp][max]}};
	#var {my[gp1][graph]}	{@graph{$my[gp1][current];$my[gp1][max]}};
	#var {my[gp2][graph]}	{@graph{$my[gp2][current];$my[gp2][max]}};
	#var {gxp_graph}	{@graph{$gxp;100}};
	#var {shp_graph}	{@graph{$shp;100}};
	#var {enemy[graph]}	{@graph{$enemy[hp];100}};
	#format {hp}		{%+5s} {@colscale{$my[hp][current];$my[hp][max]}};
	#format {hp_max}	{%+5s} {<128>$my[hp][max]<088>};
	#format {sp} 		{%+4s} {@colscale{$my[sp][current];$my[sp][max]}};
	#format {sp_max}	{%+4s} {<128>$my[sp][max]<088>};
	#format {gp1}		{%+3s} {@colscale{$my[gp1][current];$my[gp1][max]}};
	#format {jugger[ehealth]}	{%+6s} {@colscale{$enemy[hp];100}};
	#format {nukes}		{%+2s} {$nukes};
	#format {gxp_col}	{%+9s} {@colscale{$gxp;100}};
	#format {reset}		{%+2s} {$reset};
	#format {corpses[inventory]}	{%+2s} {$corpses[inventory]};
	#format {corpses[truck]}	{%+2s} {$corpses[truck]};
	#format {corpses[coffin]}	{%+2s} {$corpses[coffin]};
	#format {corpses[freezer]}	{%+2s} {$corpses[freezer]};
	#if {"$draw[hpbar]" == "on"} {
		#showme {<088>HP:$hp/$hp_max SP:$sp/$sp_max ST:   $gp1\%    G:$gxp_col\%  N: $nukes/$clan/$reset\%   E:$jugger[ehealth]\%    IC:<130>${corpses[inventory]}<088> TC:<130>${corpses[truck]}<088>${sb1_cooler}} {-4};
		#showme {HP:${my[hp][graph]}  S:${my[sp][graph]} ST:${my[gp1][graph]} G:${gxp_graph} SH:${shp_graph}  E:${enemy[graph]} CF:<130>${corpses[coffin]}<088>${sb2_freezer}} {-3};
	};
	#if {"$draw[gline]" == "on"} {
		#showme {$mip[gline][1]  $mip[gline][2]} {-6}
	}
}

#alias {stimheal} {

	#if {corpses[coffin]>0} {
		#send !unwrap;
		#send !fdeener;
	};

	#if {1==2} {
		#if {$corpses[inventory] > 10} {
			#math {corpses[inventory]} {$corpses[inventory] - 1}
		}; #elseif {$corpses[truck] > 0} {
			#send !get corpse from $truck[lower];
			#math {corpses[truck]} {$corpses[truck] -1}
		}; #elseif {$corpses[cooler] > 0} {
			#send !uncooler corpse
		}; #else {
			#if {"$bot" == "on"} {
				.stop;
			};
			#bell
		};
		#send !fdeener
	};
}

/* Set truck name */
#var truck[name] {Xoox}
#format {truck[lower]} {%l} {$truck[name]}
#format {truck[first_cap]} {%n} {$truck[lower]}

/* Set Ammo Defaults */
#var {ammo_buy_amount}	{5000}
#var {weapon_type}	{missile}
#var {ammo_type}	{6}
#var {ammo_buy}		{on}
#var {ammo_donate}	{off}

#act {After your discount, it will cost %1 coins.} {
	#if {"$ammo_donate" == "on"} {
		#send !give %1 coins to cl;
		#send !truck vault
	}
}

/* CREPORT */
#nop #act {{\[([\w\s\Q/(\\\)\'\,-<\E\{\}\.]+)\] \[(\s*)(\d+)\] \[(\s*)(\d+)\]}}
#act {[%1] [%2] [%3] $} {
	#format {cr_class} {%p} {%2};
	#format {cr_rnds} {%p} {%3};
	#if {$cr_rnds == 0} {
		#var {cr_hr} {Undefined}
	} {
		#math {cr_hr} {1.0*${cr_class}/${cr_rnds}*1801};
		#format {cr_hr} {%d} {${cr_hr}}
	};
	#math {cr_class_tot} {${cr_class_tot} + ${cr_class}};
	#math {cr_rnds_tot} {${cr_rnds_tot} + ${cr_rnds}};
	#math {cr_count} {${cr_count} + 1};
	#format {cr_hr} {%+12s} {<078>${cr_hr}<088>};
	#var {cr_str} { [<078>%1<088>] [<078>%2<088>] [<138>%3<088>] [$cr_hr]};
	#line gag;
	#echo {$cr_str}
}
#substitute { .--------------------------. .------------. .----.}
	    {<038> .-------------------------. .------------. .----. .------------.<088>}
#substitute {   Monster\'s Name                  Class      Rnds}
	    {    Monster's Name                Class      Rnds     Exp/Hour}
#act {^  Current Enemy: } {
	#math	{cr_avg_class}	{1.0*${cr_class_tot}/${cr_count}};
	#format	{cr_avg_class}	{%d}	{${cr_avg_class}};
	#math	{cr_avg_rnds}	{1.0*${cr_rnds_tot}/${cr_count}};
	#format	{cr_avg_rnds}	{%d}	{${cr_avg_rnds}};
	#math 	{cr_avg_hr}	{1.0*${cr_class_tot}/${cr_rnds_tot}*1800};
	#format	{cr_avg_hr}	{%d}	{${cr_avg_hr}};
	#math	{cr_avg_xp} 	{${cr_avg_hr}*.8};
	#var	cr_class_tot	0;
	#var	cr_rnds_tot	0;
	#var	cr_count	0;
	#format	{cr_avg_class}	{%+32s}	{${cr_avg_class}};
	#format	{cr_avg_rnds}	{%+7s}	{${cr_avg_rnds}};
	#format	{cr_avg_hr}	{%+15s}	{${cr_avg_hr}};
	#format	{cr_avg_xp}	{%d}	{${cr_avg_xp}};
	#format	{cr_avg_xp}	{%+64s}	{${cr_avg_xp}};
	#var	{cr_str}	{  Average:${cr_avg_class}${cr_avg_rnds}${cr_avg_hr}};
	#showme {${cr_str}};
	#showme {${cr_avg_xp}}
}


/* Aliases */
#alias corpsetrig {#nop}

#NOP Fire all nukes at current stepper mob or current enemy
#alias ff {
	#if {"$mobname" != ""} {
		#send !fire $jugger[nukes] $mobname
	}; #else {
		#send !fire $jugger[nukes] $enemy[lc]
	}
}

#class {juggernaut} {close}
